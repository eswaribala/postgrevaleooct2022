psql -h localhost -d postgres -U postgres -p 5432 -W
select datname,oid from pg_database where datname='postgres';
.\initdb.exe -D c:/democluster/postgresql/14/data

Change the server port in data folder config file
.\pg_ctl.exe start -D e:\PostgreSQL\14\data
Server started
psql -h localhost -d postgres  -p 5436 -W

\l list the databases
\c change the database
\dt list the tables
select version();
select current_date;
select 56+77;
\q quit the data cluster

Create table cwd_directory(id numeric(18,0) Primary Key, directory_name varchar(255), lower_directory_name varchar(255), created_date timestamptz,
updated_date timestamptz, active numeric(9,0));

\d cwd_directory -- describe the table

show timezone;
set timezone = 'America/Los_Angeles';

insert into cwd_directory (id,directory_name,lower_directory_name,created_date,updated_date,active) values(1,'LDAP', 'ldap', '2022-04-05 20:20:25-07', '2022-09-19 01:02:25-07',
2);
select current_timestamp;
update cwd_directory set created_date='2022-04-05 12:40:47.910466+05:30' where id=1;

#foreign key
create table cwd_synchronization_token(directory_id numeric(18,0) references cwd_directory(id), synch_status_token text);

insert into cwd_synchronization_token(directory_id,synch_status_token)values(1,'available');

create table cwd_user(id numeric(18,0) primary key, directory_id numeric(18,0) references cwd_directory(id), user_name varchar(255),
lower_user_name varchar(255));

alter table cwd_user add constraint unique_key unique(lower_user_name); 

create table app_user(id numeric(18,0) primary key, user_key varchar(255),
lower_user_name varchar(255) references cwd_user(lower_user_name));


alter table app_user add constraint unique_key_app_user unique(user_key); 

create type featuretype as Enum('ACTIVE','INACTIVE');

create table feature(id numeric(18,0) primary key, feature_name varchar(255), feature_type featuretype, user_key varchar(255)
references app_user(user_key));


#geometry type
CREATE EXTENSION postgis;

CREATE TABLE geometries (name varchar, geom geometry);

INSERT INTO geometries VALUES
  ('Point', 'POINT(0 0)'),
  ('Linestring', 'LINESTRING(0 0, 1 1, 2 1, 2 2)'),
  ('Polygon', 'POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))'),
  ('PolygonWithHole', 'POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(1 1, 1 2, 2 2, 2 1, 1 1))'),
  ('Collection', 'GEOMETRYCOLLECTION(POINT(2 0),POLYGON((0 0, 1 0, 1 1, 0 1, 0 0)))');

SELECT name, ST_AsText(geom) FROM geometries;

create Type FullName as (FirstName varchar(100),LastName varchar(100),
MiddleName varchar(100));
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

create table member(id uuid DEFAULT uuid_generate_v4(),
name FullName);

insert into member (name) values(('Parameswari','bala',''));


#ts vector and ts query
CREATE TABLE courses
(id SERIAL PRIMARY KEY, 
title VARCHAR(80) NOT NULL, 
description VARCHAR(200) NOT NULL);
INSERT INTO courses (title, description) VALUES
  ('Improve your sales skills', 'A complete course that will help you to improve your sales skills'),
  ('Intro to Computer Science', 'Understand how computers work'),
  ('Law 101', 'Have you ever wondered doing some Law?'),
  ('Natural Sciences the easy way', 'Your guide to understand the world'),
  ('Mathematics: a gentle introduction', 'Numbers are easy'),
  ('The crash course of Data Science', 'Be a data scientist in 5 weeks'),
  ('Sales crash course', 'Yet another course on Sales'),
  ('Java in a nutshell', 'Learn Java in 21 days'),
  ('Ruby programming language', 'DDH sales Ruby, but could you buy it?'),
  ('Sales matter', 'Really?'),
  ('History in 3 pages', 'Can you learn history in 3 pages?'),
  ('Mastering Git', 'Git history will no longer bother you'),
  ('Cooking like a boss', 'Be the next master chef'),
  ('Master Chef 3.0', 'Cooking revisited'),
  ('Functional Programming in a nutshell', 'Learn FP in 4 days');

SELECT * FROM courses;

SELECT 
    courses.id,
    courses.title,
    courses.description
FROM 
    courses
WHERE  
    courses.title LIKE '%java%' OR courses.description LIKE '%java%'

SELECT to_tsvector('Java in a nutshell')

SELECT to_tsquery('java & in & a & nutshell');

/* true */
SELECT to_tsquery('java & in & a & nutshell') @@ to_tsvector('Java in a nutshell'); 

/* true */
SELECT to_tsquery('java') @@ to_tsvector('Java in a nutshell'); 

/* true */
SELECT to_tsquery('nutshell') @@ to_tsvector('Java in a nutshell'); 

/* false */
SELECT to_tsquery('batatas') @@ to_tsvector('Java in a nutshell');

SELECT * 
FROM courses
WHERE to_tsquery('java') @@ to_tsvector(courses.title)

SELECT
    ts_rank(
        to_tsvector('Java in a nutshell'),
        to_tsquery('java')
    )

/* 0.06079271 */
SELECT ts_rank(to_tsvector('Java in a nutshell'), to_tsquery('nutshell')) 

/* 0 */
SELECT ts_rank(to_tsvector('Java in a nutshell'), to_tsquery('batatas'))

SELECT
    ts_rank(
        to_tsvector('Java in a nutshell'),
        to_tsquery('java')
    ) AS rank_title,
    ts_rank(
        to_tsvector('Learn in 21 days'),
        to_tsquery('java')
    ) AS rank_description

SELECT 
    courses.id,
    courses.title,
    courses.description,
    ts_rank(to_tsvector(courses.title), query) as rank_title,
    ts_rank(to_tsvector(courses.description), query) as rank_description
FROM 
    courses, 
    to_tsvector(courses.title || courses.description) document,
    to_tsquery('sales') query
WHERE query @@ document
ORDER BY rank_description, rank_title DESC

CREATE EXTENSION pg_trgm

SELECT 
    to_tsquery('jova') @@ to_tsvector('Java in a nutshell') AS search,
    SIMILARITY('jova', 'Java in a nutshell') as similarity

SELECT 
    courses.id,
    courses.title,
    courses.description,
    rank_title,
    rank_description,
    similarity
FROM 
    courses, 
    to_tsvector(courses.title || courses.description) document,
    to_tsquery('curse') query,
    NULLIF(ts_rank(to_tsvector(courses.title), query), 0) rank_title,
    NULLIF(ts_rank(to_tsvector(courses.description), query), 0) rank_description,
    SIMILARITY('curse', courses.title || courses.description) similarity
WHERE query @@ document OR similarity > 0
ORDER BY rank_title, rank_description, similarity DESC NULLS LAST

CREATE EXTENSION pg_trgm

SELECT 
    
    courses.title,
    courses.description,
    similarity
FROM 
    courses, 
    to_tsvector(courses.title || courses.description) document,
    to_tsquery('low') query,
    
    SIMILARITY('low', courses.title || courses.description) similarity
WHERE query @@ document OR similarity > 0;


