do 
$$
declare
   location_count integer;
begin 
   select count(*) into location_count
   from location;
   raise notice 'The number of locations available: %', location_count;
end;
$$;
===================================================================================
do 
$$
declare
   location_count integer;
   v_contact_number integer;
begin 
   select count(*) into location_count
   from location;
   select count(DISTINCT(contact_number)) into v_contact_number from location;
   raise notice 'The number of locations available and unique mobile numbers: %, %', location_count, v_contact_number;
end;
$$;
=========================================================================================================================

do $$ 
declare
   created_at integer;
   
begin 
  created_at := 90;
   raise notice '%', created_at;
   perform pg_sleep(10);
   created_at := 190;
   raise notice '%', created_at;
end $$;
===============================================================================================================

do $$ 
declare
   v_regional_code location.regional_code%type;
   v_address location.address%type;
begin 
   -- get data of the location id 100
   select regional_code,address into v_regional_code,v_address
   from location
   
   where regional_code = 100;
   
   -- show the Location
   raise notice 'Location With Regional Code % has address %', v_regional_code, v_address;
end; $$
=============================================================================================
do $$ 
<<outer_block>>
declare
  counter integer := 1000;
begin
   counter := counter + 1;
   raise notice 'The current value of the counter is %', counter;
   <<inner_block1>>
   declare
       counter integer := 5000;
   begin
       counter := counter + 10;
       raise notice 'Counter in the subblock is %', inner_block1.counter;
       raise notice 'Counter in the outer block is %', outer_block.counter;
   end inner_block1;
  <<inner_block2>>
   declare
       counter integer := 5000;
   begin
       counter := counter + 10;
       raise notice 'Counter in the subblock is %', inner_block2.counter;
       raise notice 'Counter in the outer block is %', outer_block.counter;
   end inner_block2;

   raise notice 'Counter in the outer block is %', counter;
   
end outer_block $$;
======================================================================================================
do $$ 
declare
   selected_row employee%rowtype; 
begin 
   -- get row from employee
   select *
   from employee
   into selected_row
   where employee_no=1;
   
   -- show the employee title
   raise notice 'Employee id 1: % , %', selected_row.name,selected_row.status;
end; $$
=================================================================================================
do
$$
declare
	rec record;
begin
	for rec in select *
			from employee 
			where employee_no > 0
			
	loop
		raise notice '%, %', rec.name,rec.status;	
	end loop;
end;
$$
================================================================================================
do
$$
declare
	rec record;
begin
	for rec in select *
			from employee 
			where employee_no > 0
			
	loop
		raise notice '%, %', rec.name,rec.status;	
	end loop;
	for rec in select *
			from location 
			
			
	loop
		raise notice '%, %', rec.regional_code,rec.address;	
	end loop;
end;
$$
============================================================================================================
do $$
declare
  selected_row employee%rowtype;
  p_employee_no employee.employee_no%TYPE := 100;
begin  

  select * from employee
  into selected_row
  where employee_no = p_employee_no;
  
  if not found then
     raise notice 'The employee % could not be found',p_employee_no;
  else
     raise notice 'The employee % is %', p_employee_no,selected_row.name;
  end if;
end $$
=====================================================================================================
do $$

declare
  row record;
  
begin  
for row in select * from employee  
     
  loop

  if row.status = 'Project'  found then
     raise notice 'The employee could not be found';
  else
     raise notice 'The employee % is %', row.employee_no,row.name;
  end if;
  
end loop;
end $$
==================================================================================
Create Type CustomerStatus As Enum('Active','InActive');
create table Customer(CustomerId bigserial primary key,
name varchar(255), status CustomerStatus,DOB date);
CREATE OR REPLACE PROCEDURE AddCustomer
(  
    p_customerId OUT customer.customerid%type,  
    p_name customer.name%type,  
    p_status customer.status%type,  
    p_dob DATE  
)  
LANGUAGE plpgsql AS  
$$  
BEGIN         
   INSERT INTO Customer (Name,Status,DOB) VALUES   
    (p_name,  
     p_status,
     p_dob
    ) RETURNING CustomerId INTO p_customerId;  
END  
$$; 
CALL addcustomer(0,'Parameswari','Active','1970-12-02')  
